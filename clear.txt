# Inicio
def plot_sonda(plotadiario):
    global dadosGL, estacoesin, estacoesout, arquivotxt
    planilha = './DADOS/SONDA/' + str(ano) + '/' + sigla + '/' + sigla + str(ano)[-2:] + format(mes, '02d') + 'ED.csv'

    with open(planilha, 'r') as csvfile:
        plots = csv.reader(csvfile, delimiter=';')
        global diasmes, diainicial, media, sonda;

        # Detecta se determinado ano é bissexto
        if anobissexto(ano): diasmes = [31 , 29 , 31 , 30 , 31, 30, 31, 31, 30, 31,30, 31]; # É
        else: diasmes = [31 , 28 , 31 , 30 , 31, 30, 31, 31, 30, 31,30, 31]; # N
        
        # Faz a leitura dos dados do Modelo GL
        GL();
        
        # Plotagem diaria
        sonda = pd.read_csv(planilha, header=None, sep=';', usecols=[*range(6)])
        cabecalho(str(sonda.loc[0, 3]).isdigit())

        diainicial = sonda.loc[0, 2]
        
        for dia in range(31):
            diaria(dia+diainicial, plotadiario)

        # Plotagem mensal
        mensal();

        # Plotagem dispersao
        #dispersao();

        # Atualiza Estacoes
        atualizar();

        # Gera os arquivos de Texto com os valores calculados
        gravartexto();
        print('Concluido: ' + str(mes))
        
# Plotagem diaria

def diaria(dia, plotadiario):
    select = sonda.iloc[np.where(sonda[col_dia].values == dia)]
    x = select[col_min].values.tolist()
    y = select[col_irrad].values.tolist()
    
    for i in range(len(y)):
        if(y[i] > 1600) or np.isnan(y[i]): y[i]=None
        x[i] = horamin(x[i]) 

    if(contarelemento(y) > 1260): # Dias com falta de dados durante mais de 180 minutos (3h) sao descartados, 1440-180=1260

        media = mediadiaria(y)/1440
        ymensal.append(media)

        temp_day = diajuliano(dia, mes, ano)
        print(dia, mes, ano, temp_day-1)
        ir_anual_son[temp_day-1] = round(media, 3);
        
        
        plt.figure(dia)
        plt.cla() # Limpa os eixos
        plt.clf() # Limpa a figura
        plt.plot(x,y, 'b-') #b- é azul
        plt.title("Rede Sonda - " + sigla + str(ano)[-2:] + format(mes, '02d') + format(dia-diainicial+1, '02d') + " - Dia [" + str(dia) + "]")
        plt.ylabel('Irradiância (Wm-2)')
        plt.xlabel('Tempo (Hora UTC)')
        plt.ylim(0, 1600)
        plt.text(0.35, 1400, 'Média: %5.2f' % media, bbox={'facecolor':'blue', 'alpha':0.5, 'pad':10})

        diretorio = './DADOS/IMAGENS/Sonda/' + str(ano) + '/' + sigla + '/' + format(mes, '02d')
        try: os.stat(diretorio)
        except: os.mkdir(diretorio)
        plt.savefig(diretorio + '/' + str(dia) + '.png')

        if(plotadiario < 1): plt.close()
            
    else: ymensal.append(None)

    # Registra o dia
    xmensal.append(dia-diainicial+1)

    # Limpa as Variaveis
    x.clear()
    y.clear()

# Define o cabecalho do Cabecalhos
def cabecalho(x):
    global col_dia, col_min, col_irrad, rede
    if x == True:
        # Sonda Novo
        col_dia = 2
        col_min = 3
        col_irrad = 4
    else:
       # Sonda Antigo 
       col_dia = 2
       col_min = 4
       col_irrad = 5

# Converte minutos em horas
def horamin(x):
    hora = (x/60)
    return (hora)

# Encontra um Elemento em uma Lista
def findElement(elemento, lista):
    for i in range(len(lista)):
        if(elemento == lista[i]):
            return i;
            break;
            
# Retorna o numero de dias de determinado mes            
def numerodiasmes(mes):
    return diasmes[mes-1]

# Formata determinado numero para duas casas.    
def 9numero):
    if(numero == None): return -999;
    else: return float("%.2f" % numero)
	

def gravartexto(sigla, mes, ano):
    arquivotxt = './DADOS/TXT/' + str(ano) + '/' + sigla + '/' + sigla + str(ano)[-2:] + format(mes, '02d') + '.txt'
    arquivo = open(arquivotxt, 'w+', encoding="ansi")
    for i in range(len(GLir)):
        string = str(xmensal[i]+1)+ '\t' + str(formatn(ymensal[i]))+ '\t' + str(formatn(GLir[i])) + '\n'
        arquivo.write(string)
    arquivo.close()
    
# Atualiza estações
def atualizar(): 
	estacoesin = './DADOS/GLESTACAO/' + str(ano) + '/estacao_' + str(ano) + format(mes, '02d') + '.txt'
	estacoesout = './DADOS/OUTPUT/ estacao_' + str(ano) + format(mes, '02d') + '.txt'   
    try:
        with open(estacoesin, "r") as tsvin, open(estacoesout, "w+") as tsvout:
            reader = csv.reader(tsvin, delimiter=' ')
            output = csv.writer(tsvout, delimiter=' ')
            id = getID(sigla, listaunica);
            for row in reader:
                if(id == row[0]): # Identifica a estação
                    for coluna in range(5, numerodiasmes(mes)+5):
                        if(row[coluna] == "-999"): # Verifica se o dado é Nulo(-999).
                            posicao = findElement(coluna-4, xmensal);
                            # Verifica se foi encontrado dado referente ao dia.
                            if(posicao != None):
                                if(ymensal[posicao] != None):
                                    row[coluna] = str(formatn(ymensal[posicao]));
                                             
                output.writerow(row);
    except: pass